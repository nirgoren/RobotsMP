import "./imports/DwyerPatterns.spectra"

/**
 * Fixed goals variant - for ControlPanel
 * Unrealizable due to obstacles blocking any path to the goals
 */
 
 
 spec RobotsMPFixedGoals1
 
 define NumRobots := 2;
 define NumObstacles := 5;
 define DX := 4;
 define DY := 4;
 
type DimX = Int(0..DX);
type DimY = Int(0..DY);
 
 sys DimX[NumRobots] robotsX;
 sys DimY[NumRobots] robotsY;
 
 
 define
  startX[NumRobots] := {0, 4};
  startY[NumRobots] := {0, 4};
  obstaclesX[NumObstacles] := {0, 1, 2, 3, 4};
  obstaclesY[NumObstacles] := {2, 2, 2, 2, 2};
  goalsX[NumRobots] := {0, 4};
  goalsY[NumRobots] := {4, 0};
  	
  predicate moveXOnly(DimX Xpos, DimY Ypos):
	(Xpos+1 = next(Xpos) |
	Xpos   = next(Xpos) |
	Xpos-1 = next(Xpos) ) &   
	Ypos   = next(Ypos);
  
  predicate moveYOnly(DimX Xpos, DimY Ypos):
	(Ypos+1 = next(Ypos) |
	Ypos   = next(Ypos) |
	Ypos-1 = next(Ypos) ) &   
	Xpos   = next(Xpos);
	
	
//Buggy	
//  predicate CollisionRobotObstacle(Int(0.. (NumRobots-1)) i, Int(0.. (NumObstacles-1)) j):
//  	robotsX[i] = obstaclesX[j] & robotsY[i] = obstaclesY[j];
//  	
//  predicate validMove(Int(0.. (NumRobots-1)) i):
//  	moveXOnly(robotsX[i], robotsY[i]) | moveYOnly(robotsX[i], robotsY[i]);
	
  predicate swap(Int(0.. (NumRobots-1)) i, Int(0.. (NumRobots-1)) j):
  	(i != j) & ((next(robotsX[i]) = robotsX[j] & next(robotsY[i]) = robotsY[j]) | (next(robotsX[j]) = robotsX[i] & next(robotsY[j]) = robotsY[i]));
  	  	
  predicate CollisionBetweenRobots(Int(0.. (NumRobots-1)) i, Int(0.. (NumRobots-1)) j):
  	(i != j) & (robotsX[i] = robotsX[j] & robotsY[i] = robotsY[j]);
  
  predicate reachGoal(Int(0.. (NumRobots-1)) i):
 	robotsX[i] = goalsX[i] & robotsY[i] = goalsY[i];
  	
  gar startPositions:
  	forall i in Int(0..(NumRobots-1)).robotsX[i] = startX[i] & robotsY[i] = startY[i];
  	
  gar goalPositions:
  	GF forall i in Int(0..(NumRobots-1)).robotsX[i] = goalsX[i] & robotsY[i] = goalsY[i];
  
  gar noCollisionsWithObstacles:
  	G forall i in Int(0..(NumRobots-1)).forall j in Int(0..(NumObstacles-1)).!(robotsX[i] = obstaclesX[j] & robotsY[i] = obstaclesY[j]);
   
  gar noCollisionsBetweenRobots:
  	G forall i in Int(0..(NumRobots-1)).forall j in Int(0..(NumRobots-1)).!CollisionBetweenRobots(i, j);
  	
  gar noSwaps:
  	G forall i in Int(0..(NumRobots-1)).forall j in Int(0..(NumRobots-1)).!swap(i, j);
  	
  gar validMoves:
    G forall i in Int(0..(NumRobots-1)).(moveXOnly(robotsX[i], robotsY[i]) | moveYOnly(robotsX[i], robotsY[i]));
 
  	
  